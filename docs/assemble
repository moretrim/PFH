#!/usr/bin/env bash

# Prerequisites: pandoc, pandoc-citeproc

# fail on first error
set -Eeuo pipefail

# documentation root
root="$(dirname "${BASH_SOURCE[0]}")"
root="${root:-docs}"
pushd -- "$root"; root="$PWD"; popd

build="$root/build"

output="$root/output"
mkdir -p "$output" 2>&1 >/dev/null

# Pandoc invocation options
opts=(--data-dir="$root" --resource-path=.:"$root")

# References

## Argentina

prefix=references/argentina
pushd -- "$root/$prefix"

wip="$build/$prefix"
mkdir -p "$wip" 2>&1 >/dev/null

# HACK HACK HACK TODO get rid of this if/when migrating to citeproc proper
ln -sf "$root/styles" ./

echo 'Reminder that proper generation requires two passes:
 · first to populate `fragment.General.markdown` with entries
 · second to generate `Main.json` after populating its source from the generated entries'

### Section fragments

# the output of General.markdown is manually spliced into Main.markdown
pandoc "${opts[@]}" -so "$wip"/fragment.General.markdown --to gfm --filter pandoc-citeproc \
    General.markdown

# the rest is autogenerated, to be assembled later
for fragment in Elections.markdown Parties.markdown ; do
    pandoc "${opts[@]}" -so "$wip"/"fragment.${fragment%.markdown}.json" --filter pandoc-citeproc \
        "$fragment"
done

### Main document

# source must be populated at some point, see above
pandoc "${opts[@]}" -so "$wip"/Main.json --filter pandoc-citeproc Main.markdown

### Assemble everything

pandoc "${opts[@]}" -so "$output"/references/argentina.html              --filter pandoc-citeproc \
    "$wip"/Main.json "$wip"/fragment.*.json

pandoc "${opts[@]}" -so "$output"/references/argentina.markdown --to gfm --filter pandoc-citeproc \
    "$wip"/Main.json "$wip"/fragment.*.json

popd
